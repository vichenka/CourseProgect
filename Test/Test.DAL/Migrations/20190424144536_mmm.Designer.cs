// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test.DAL;

namespace Test.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190424144536_mmm")]
    partial class mmm
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Test.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Test.Models.HISTORY", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ID_RESULTH");

                    b.Property<int?>("ID_TYPE");

                    b.Property<int?>("TYPEID");

                    b.Property<string>("USERId");

                    b.HasKey("ID");

                    b.HasIndex("TYPEID");

                    b.HasIndex("USERId");

                    b.ToTable("HISTORY");
                });

            modelBuilder.Entity("Test.Models.POINT", b =>
                {
                    b.Property<int>("ID_ANSWER")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ANSWER")
                        .HasMaxLength(50);

                    b.Property<int?>("ID_Quest");

                    b.Property<int?>("POINT1")
                        .HasColumnName("POINT");

                    b.Property<int?>("QUESTIONID_QUESTION");

                    b.HasKey("ID_ANSWER");

                    b.HasIndex("QUESTIONID_QUESTION");

                    b.ToTable("POINT");
                });

            modelBuilder.Entity("Test.Models.QUESTION", b =>
                {
                    b.Property<int>("ID_QUESTION")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ID_TEST");

                    b.Property<string>("QUESTION1")
                        .HasColumnName("QUESTION")
                        .HasMaxLength(50);

                    b.Property<int?>("TESTID");

                    b.HasKey("ID_QUESTION");

                    b.HasIndex("TESTID");

                    b.ToTable("QUESTION");
                });

            modelBuilder.Entity("Test.Models.RESULT", b =>
                {
                    b.Property<int>("ID_Result")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ID_Test");

                    b.Property<int?>("RESULT1");

                    b.Property<int?>("RESULT2");

                    b.Property<int?>("TESTID");

                    b.Property<string>("TEXT_RESULT")
                        .HasMaxLength(50);

                    b.HasKey("ID_Result");

                    b.HasIndex("TESTID");

                    b.ToTable("RESULT");
                });

            modelBuilder.Entity("Test.Models.TEST", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ID_TYPE");

                    b.Property<string>("NAME_TEST")
                        .HasMaxLength(50);

                    b.Property<int?>("TYPEID");

                    b.Property<string>("USERId");

                    b.HasKey("ID");

                    b.HasIndex("TYPEID");

                    b.HasIndex("USERId");

                    b.ToTable("TEST");
                });

            modelBuilder.Entity("Test.Models.TYPE", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NAME_TYPE")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("TYPE");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Test.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Test.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Test.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Test.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Test.Models.HISTORY", b =>
                {
                    b.HasOne("Test.Models.TYPE", "TYPE")
                        .WithMany("HISTORY")
                        .HasForeignKey("TYPEID");

                    b.HasOne("Test.Models.ApplicationUser", "USER")
                        .WithMany("HISTORY")
                        .HasForeignKey("USERId");
                });

            modelBuilder.Entity("Test.Models.POINT", b =>
                {
                    b.HasOne("Test.Models.QUESTION", "QUESTION")
                        .WithMany("POINT")
                        .HasForeignKey("QUESTIONID_QUESTION");
                });

            modelBuilder.Entity("Test.Models.QUESTION", b =>
                {
                    b.HasOne("Test.Models.TEST", "TEST")
                        .WithMany("QUESTION")
                        .HasForeignKey("TESTID");
                });

            modelBuilder.Entity("Test.Models.RESULT", b =>
                {
                    b.HasOne("Test.Models.TEST", "TEST")
                        .WithMany("RESULT")
                        .HasForeignKey("TESTID");
                });

            modelBuilder.Entity("Test.Models.TEST", b =>
                {
                    b.HasOne("Test.Models.TYPE", "TYPE")
                        .WithMany("TEST")
                        .HasForeignKey("TYPEID");

                    b.HasOne("Test.Models.ApplicationUser", "USER")
                        .WithMany("TEST")
                        .HasForeignKey("USERId");
                });
#pragma warning restore 612, 618
        }
    }
}
